This module requires asset-assistant to run.

Installing for development / testing:
--------------------------------------------------------------------------------
1) Download NERVE repository.  This requires some local projects.
   - nerscriber
   - nerveserver
   - nidget
   - utility
2) exec 'npm i' to install node_modules.
3) exec 'npm run build' to setup dependencies and build the root js file.
4) start nerve 'Server' first.

Install for use with other pacakages.
--------------------------------------------------------------------------------
1) exec 'npm i <this directory>'
2) exec 'assets src' to copy dependencies. Note, bootstrap.css will be put into
   scripts/bootstrap.

Directory Layout
--------------------------------------------------------------------------------
- root/ 
    - nbproject/ : netbeans project files
    - public_html : web root when deployed for testing target for build
        - assets/ : non css/js files            
        - styles/ : css files
    - src/ : source files
        - assets/entitypanel/ : asset files copied with 'assets'.
        - scripts/entitypanel/ : source js files for browserify        
        - styles/entitypanel/ : css files copied with 'assets'.

Initialization Code Fragment         
--------------------------------------------------------------------------------
const EntityPanel = require("EntityPanel");
let nerveRoot = await scriberSocket.connect("ws://localhost:8080/NERVESERVER/NerveSocket");   
window.entityPanel = new EntityPanel("#target");
entityPanel.setDictionary(nerveRoot.getDictionary());

Methods
--------------------------------------------------------------------------------
async unsetDocument() : triggers notifyClearDocument
async setDocument(filename, documentText, schemaXMLText) : triggers notifySetDocument
setStyle(stylename) : use to change styles associated with context's styles array
emptyCollection() : unselect all selected entities
async selectByLemmaTag(lemma, tag) : selectg entities that metch both leamma & tag
scrollTo(taggedEntityWidget)
mergeEntities() : merge all selected entities
tagSelection(selection, schemaTagName) : tag selected text (needs schemaTagName to verify)


Events
--------------------------------------------------------------------------------
notifyWarning(text)
notifyClearDocument(taggedEntityArray)
notifySetDocument(filename, taggedEntityArray)
notifyUntaggedEntities (array of untagged entities, array of resulting text nodes)
notifyDocumentClick() : when a non-entiy part of the document is clicked
notifyCollectionAdd(array of currently selected entities, array of newly selected entities)
notifyCollectionClear(array of currently selected entities, array of previously selected entities)
notifyCollectionRemove(array of currently selected entities, array of previously selected entities)
notifyEntityUpdate(array of manipulated entities, array of previous values*)
notifyTaggedEntityClick(entity, double, ctrl, shift alt)

* each entry corrisponds to a tagged entity in the other array. 
